{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport default function useOnScreen(ref) {\n  _s();\n\n  const [isIntersecting, setIntersecting] = useState(false);\n  const observer = new IntersectionObserver(_ref => {\n    let [entry] = _ref;\n    return setIntersecting(entry.isIntersecting);\n  });\n  useEffect(() => {\n    observer.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n}\n\n_s(useOnScreen, \"+TWZGT8mxcpNH+JS7IkSFv1hR0A=\");","map":{"version":3,"names":["useState","useEffect","useOnScreen","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","observe","current","disconnect"],"sources":["/Users/apb/Coding/aballo-website/src/hooks/useOnScreen.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nexport default function useOnScreen(ref) {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  const observer = new IntersectionObserver(([entry]) =>\n    setIntersecting(entry.isIntersecting)\n  );\n\n  useEffect(() => {\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return isIntersecting;\n}\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,eAAe,SAASC,WAAT,CAAqBC,GAArB,EAA0B;EAAA;;EACvC,MAAM,CAACC,cAAD,EAAiBC,eAAjB,IAAoCL,QAAQ,CAAC,KAAD,CAAlD;EAEA,MAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB;IAAA,IAAC,CAACC,KAAD,CAAD;IAAA,OACxCH,eAAe,CAACG,KAAK,CAACJ,cAAP,CADyB;EAAA,CAAzB,CAAjB;EAIAH,SAAS,CAAC,MAAM;IACdK,QAAQ,CAACG,OAAT,CAAiBN,GAAG,CAACO,OAArB,EADc,CAEd;;IACA,OAAO,MAAM;MACXJ,QAAQ,CAACK,UAAT;IACD,CAFD;EAGD,CANQ,EAMN,EANM,CAAT;EAQA,OAAOP,cAAP;AACD;;GAhBuBF,W"},"metadata":{},"sourceType":"module"}